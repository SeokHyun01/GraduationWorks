@page "/user/camera"

@attribute [Authorize(Roles = SD.ROLE_CLIENT)]

@inject ICameraRepository _cameraRepository
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject UserManager<IdentityUser> _userManager


@if (IsLoading)
{
	<p class="placeholder-glow">
		<span class="placeholder w-50 bg-primary"></span>
		<span class="placeholder w-75 bg-primary"></span>
		<span class="placeholder w-25 bg-primary"></span>
	</p>
}
else
{
	@if (Cameras.Any())
	{
		<div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-3">
			@foreach (var camera in Cameras)
			{
				<div class="col">
					<div class="card shadow-sm">
						<div class="card-header" style="text-align: center;">
							<span class="card-text">@camera.Name</span>
							<SfQRCodeGenerator BackgroundColor="#f8f9fc" Width="50%" Height="50%" Value=@($"{_navigationManager.BaseUri}user/{camera.UserId}/camera/{camera.Id}/setting")>
								<QRCodeGeneratorDisplayText Visibility="false"></QRCodeGeneratorDisplayText>
							</SfQRCodeGenerator>
						</div>
						<div class="card-body" width="100%" height="225">
							<img id="@($"img-{camera.Id}")" style="width: 100%;" class="mt-3">
							<span class="card-text mt-3">Angle</span>
							<input id=@($"input-{camera.Id}") type="range" class="form-range" value=@(camera.Angle) min="0"
								   max="180" step="1" @onchange="(args)=>SetCameraAngle(args, camera.Id)" />
							<div class="d-flex justify-content-between align-items-center mt-3">
								<div class="btn-group">
									<NavLink href=@($"/user/camera/{camera.Id}") class="btn btn-sm btn-outline-secondary">
										Goto
									</NavLink>
									<button type="button" class="btn btn-sm btn-outline-danger"
									@onclick="()=>OnCameraDeleted(camera)">
										Remove
									</button>
								</div>
								<div class="form-check form-switch">
									<input id=@($"rtc-{camera.Id}") value="false" class="form-check-input" type="checkbox" role="switch" @onchange="(args)=>StopRTC(args, camera.Id)" disabled>
									<label class="form-check-label" for=@($"rtc-{camera.Id}")>Disable RTC</label>
								</div>
							</div>
						</div>
					</div>
				</div>
			}
		</div>
	}
	else
	{
		<p>Not Found</p>
	}

	<EditForm Model="@Camera" OnValidSubmit="OnCameraCreated">
		<DataAnnotationsValidator />
		<div class="input-group mt-3 mb-3">
			<span class="input-group-text">Camera Name</span>
			<InputText @bind-Value="Camera.Name" type="text" class="form-control"></InputText>
			<button class="btn btn-outline-primary">New Camera</button>
		</div>
	</EditForm>
}


@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationState { get; set; }
	private IdentityUser? User { get; set; } = null;

	private bool IsLoading { get; set; } = true;

	private IEnumerable<CameraDTO> Cameras { get; set; } = new List<CameraDTO>();
	private CameraDTO Camera { get; set; } = new CameraDTO();

	private IMqttClient? MqttClient { get; set; } = null;

	private HubConnection? RTCHubConnection { get; set; } = null;


	private async Task StopRTC(ChangeEventArgs args, int cameraId)
	{
		if (!Convert.ToBoolean(args.Value))
		{
			var roomName = cameraId.ToString();
			if (RTCHubConnection != null && RTCHubConnection.State == HubConnectionState.Connected)
			{
				await RTCHubConnection.SendAsync("StopRTC", roomName);
				await _jsRuntime.InvokeVoidAsync("set_input_disabled", $"rtc-{cameraId}", true);
			}
		}
	}

	private async ValueTask getCameras(string userId)
	{
		if (!IsLoading)
		{
			IsLoading = true;
			StateHasChanged();
		}

		Cameras = await _cameraRepository.GetAllByUserId(User.Id);

		IsLoading = false;
		StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var authState = await AuthenticationState;
			User = await _userManager.FindByNameAsync(authState.User.Identity.Name);

			RTCHubConnection = new HubConnectionBuilder()
			.WithUrl(_navigationManager.ToAbsoluteUri("/hub/rtc"), (opts) =>
			{
				opts.HttpMessageHandlerFactory = (message) =>
				{
					if (message is HttpClientHandler clientHandler)
					{
						// SSL 무시
						clientHandler.ServerCertificateCustomValidationCallback +=
							(sender, certificate, chain, sslPolicyErrors) => { return true; };
					}
					return message;
				};
			}).Build();

			RTCHubConnection.On<string>("OnConnected", async connectionId =>
			{
				await RTCHubConnection.SendAsync("AddUser", User.Id);				
			});

			RTCHubConnection.On("OnEnabledRTC", async () =>
			{
				await RTCHubConnection.SendAsync("GetAllEnabledRTCs", Cameras.Select(x => x.Id.ToString()));
			});

			RTCHubConnection.On<IEnumerable<string>>("EnabledRTCs", async enabledRTCs =>
			{
				foreach (var roomName in enabledRTCs)
				{
					var id = $"rtc-{roomName}";
					await _jsRuntime.InvokeVoidAsync("set_checkbox_value", id, true);
					await _jsRuntime.InvokeVoidAsync("set_input_disabled", id, false);
				}
			});

			await RTCHubConnection.StartAsync();

			var mqttFactory = new MqttFactory();
			MqttClient = mqttFactory.CreateMqttClient();
			MqttClient.ApplicationMessageReceivedAsync += async e =>
			{
				var message = e.ApplicationMessage;
				if (message.Topic == "camera/image")
				{
					var cameraMessage = JsonSerializer.Deserialize<CameraDTO>(message.PayloadSegment);
					if (cameraMessage != null)
					{
						await _jsRuntime.InvokeVoidAsync("set_img_src", $"img-{cameraMessage.Id}", cameraMessage.Image);
					}

					@* // 시간 확인
					DateTime currentTime = DateTime.Now;
					string logMessage = $"now time: {currentTime.ToString("yyyy-MM-dd HH:mm:ss.fff")}";
					Console.WriteLine(logMessage); *@

				}
				else if (e.ApplicationMessage.Topic == "camera/update/angle/ack")
				{
					var cameraMessage = JsonSerializer.Deserialize<CameraDTO>(message.PayloadSegment);
					if (cameraMessage != null)
					{
						var input = $"input-{cameraMessage.Id}";
						await _jsRuntime.InvokeVoidAsync("set_input_disabled", input, false);
					}
				}
			};

			var mqttClientOptions = new MqttClientOptionsBuilder()
			.WithTcpServer("ictrobot.hknu.ac.kr", 8085)
			.Build();
			await MqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);

			var mqttSubscribeOptions = mqttFactory.CreateSubscribeOptionsBuilder()
			.WithTopicFilter(f => { f.WithTopic("camera/image"); })
			.WithTopicFilter(f => { f.WithTopic("camera/update/angle/ack"); })
			.Build();
			await MqttClient.SubscribeAsync(mqttSubscribeOptions, CancellationToken.None);

			await getCameras(User.Id);
			if (RTCHubConnection.State == HubConnectionState.Connected)
			{
				await RTCHubConnection.SendAsync("GetAllEnabledRTCs", Cameras.Select(x => x.Id.ToString()));
			}
		}
	}

	private async Task OnCameraCreated()
	{
		Camera.UserId = User.Id;
		await _cameraRepository.Create(Camera);
		await getCameras(User.Id);
	}

	private async Task OnCameraDeleted(CameraDTO camera)
	{
		await _cameraRepository.Delete(camera.Id);
		await getCameras(User.Id);
	}

	private async Task SetCameraAngle(ChangeEventArgs args, int id)
	{
		if (args.Value != null)
		{
			var angle = int.Parse(args.Value.ToString());
			var camera = await _cameraRepository.Get(id);
			if (camera != null)
			{
				camera.Angle = angle;
				await _cameraRepository.Update(camera);
			}
			var cameraMessage = new CameraDTO
				{
					Id = id,
					Angle = angle,
				};
			var payload = JsonSerializer.Serialize<CameraDTO>(cameraMessage);

			if (MqttClient != null && MqttClient.IsConnected)
			{
				var applicationMessage = new MqttApplicationMessageBuilder()
				.WithTopic("camera/update/angle/syn")
				.WithPayload(payload)
				.Build();
				await MqttClient.PublishAsync(applicationMessage, CancellationToken.None);

				var input = $"input-{cameraMessage.Id}";
				await _jsRuntime.InvokeVoidAsync("set_input_disabled", input, true);
			}
		}
	}
}
