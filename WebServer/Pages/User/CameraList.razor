@page "/user/camera"

@attribute [Authorize(Roles = SD.ROLE_CLIENT)]

@inject ICameraRepository _cameraRepository
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject UserManager<AppUser> _userManager


@if (IsLoading)
{
	<p class="placeholder-glow">
		<span class="placeholder col-10 bg-primary placeholder-lg"></span>
		<span class="placeholder col-12 bg-primary placeholder-lg"></span>
		<span class="placeholder col-6 bg-primary placeholder-lg"></span>
	</p>
}
else
{
	@if (Cameras.Any())
	{
		<table class="table">
			<thead>
				<tr>
					<th scope="col">#</th>
					<th scope="col">camera</th>
					<th scope="col">angle</th>
					<th scope="col">action</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var camera in Cameras)
				{
					<tr>
						<th scope="row">
							<SfQRCodeGenerator Value=@($"{_navigationManager.BaseUri}user/camera/setting/{camera.Id}")><QRCodeGeneratorDisplayText Text=@(camera.Name)></QRCodeGeneratorDisplayText></SfQRCodeGenerator>
						</th>
						<td>
							<div style="width: 18rem;">
								<img id="@($"img-{camera.Id}")">
							</div>
						</td>
						<td>
							<input id=@($"input-{camera.Id}") type="range" class="form-range" value=@(camera.Angle) min="0" max="180" step="1" @onchange="(args)=>SetCameraAngle(args, camera.Id)" />
						</td>
						<td>
							<div>
								<NavLink href=@($"/user/camera/{camera.Id}") class="btn btn-primary mx-3">goto</NavLink>
								<button type="button" class="btn btn-outline-danger" @onclick="()=>OnCameraDeleted(camera)">delete</button>
							</div>
						</td>
					</tr>
				}
			</tbody>
		</table>
	}
	else
	{
		<p>Not found.</p>
	}

	<EditForm Model="@Camera" OnValidSubmit="OnCameraCreated">
		<DataAnnotationsValidator />
		<div class="input-group">
			<InputText @bind-Value="Camera.Name" type="text" class="form-control" placeholder="set camera name" style="margin-right: 1rem;"></InputText>
			<button class="btn btn-outline-secondary">new camera</button>
		</div>
	</EditForm>
}


@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationState { get; set; }
	private IdentityUser? User { get; set; } = null;

	private bool IsLoading { get; set; } = true;

	private IEnumerable<CameraDTO> Cameras { get; set; } = new List<CameraDTO>();
	private CameraDTO Camera { get; set; } = new CameraDTO();

	private IMqttClient? MqttClient { get; set; } = null;


	private async ValueTask getCameras(string userId)
	{
		IsLoading = true;
		StateHasChanged();

		Cameras = await _cameraRepository.GetAllByUserId(User.Id);

		IsLoading = false;
		StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var authState = await AuthenticationState;
			User = await _userManager.FindByNameAsync(authState.User.Identity.Name);
			await getCameras(User.Id);

			var mqttFactory = new MqttFactory();
			MqttClient = mqttFactory.CreateMqttClient();
			MqttClient.ApplicationMessageReceivedAsync += async e =>
			{
				var message = e.ApplicationMessage;
				if (message.Topic == "camera/image")
				{
					var cameraMessage = JsonSerializer.Deserialize<CameraDTO>(message.PayloadSegment);
					if (cameraMessage != null)
					{
						await _jsRuntime.InvokeVoidAsync("set_img_src", $"img-{cameraMessage.Id}", cameraMessage.Image);
					}
				}
				else if (e.ApplicationMessage.Topic == "camera/update/angle/ack")
				{
					var cameraMessage = JsonSerializer.Deserialize<CameraDTO>(message.PayloadSegment);
					if (cameraMessage != null)
					{
						var input = $"input-{cameraMessage.Id}";
						await _jsRuntime.InvokeVoidAsync("set_input_disabled", input, false);
					}
				}
			};

			var mqttClientOptions = new MqttClientOptionsBuilder()
				.WithTcpServer("ictrobot.hknu.ac.kr", 8085)
				.Build();
			await MqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);

			var mqttSubscribeOptions = mqttFactory.CreateSubscribeOptionsBuilder()
				.WithTopicFilter(f => { f.WithTopic("camera/image"); })
				.WithTopicFilter(f => { f.WithTopic("camera/update/angle/ack"); })
				.Build();
			await MqttClient.SubscribeAsync(mqttSubscribeOptions, CancellationToken.None);
		}
	}

	private async Task OnCameraCreated()
	{
		Camera.UserId = User.Id;
		await _cameraRepository.Create(Camera);
		await getCameras(User.Id);
	}

	private async Task OnCameraDeleted(CameraDTO camera)
	{
		await _cameraRepository.Delete(camera.Id);
		await getCameras(User.Id);
	}

	private async Task SetCameraAngle(ChangeEventArgs args, int id)
	{
		if (args.Value != null)
		{
			var angle = int.Parse(args.Value.ToString());
			var camera = await _cameraRepository.Get(id);
			if (camera != null)
			{
				camera.Angle = angle;
				await _cameraRepository.Update(camera);
			}
			var cameraMessage = new CameraDTO
				{
					Id = id,
					Angle = angle,
				};
			var payload = JsonSerializer.Serialize<CameraDTO>(cameraMessage);

			if (MqttClient != null && MqttClient.IsConnected)
			{
				var applicationMessage = new MqttApplicationMessageBuilder()
				.WithTopic("camera/update/angle/syn")
				.WithPayload(payload)
				.Build();
				await MqttClient.PublishAsync(applicationMessage, CancellationToken.None);

				var input = $"input-{cameraMessage.Id}";
				await _jsRuntime.InvokeVoidAsync("set_input_disabled", input, true);
			}
		}
	}
}
