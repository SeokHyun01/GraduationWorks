@page "/user/camera/setting/{cameraId:int}"

@attribute [Authorize(Roles = SD.ROLE_CLIENT)]

@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject UserManager<IdentityUser> _userManager
@implements IAsyncDisposable


<div style="display: flex; align-items: center;">
	<h6 style="margin-right: 10px;">Select Object for Detection</h6>
	<select style="width: 200px;" @onchange="OnSelectedItemChanged">
		@foreach (var item in items)
		{
			<option value="@item">@item</option>
		}
	</select>

	<button style="margin-left: 10px; margin-top: -5px; height: 1.25em;  line-height: 5px;  background-color: yellow;" @onclick="Bluetooth" id="bluetooth">connect bluetooth</button>
</div>

<div style="display: flex; align-items: center;">
	<h6 style="margin-right: 10px;">Confidence Threshold</h6>
	<input style="width: 200px; height: 1.25em; margin-top: -5px;" type="text" id="conf" value="0.3" />
	<button style="margin-left: 10px; margin-top: -5px; height: 1.25em;  line-height: 5px;"
			@onclick="ChangeConfidenceThreshold" id="changeConfidence">
		change
	</button>
</div>

<canvas></canvas>
<video id="video" style="display:none;" width="224" height="224"></video>
<video id="peer_video"></video>


@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationState { get; set; }
	private IdentityUser? User { get; set; } = null;

	private string ConnectionId { get; set; } = string.Empty;
	private string RoomName { get; set; } = string.Empty;

	private HubConnection? RTCHubConnection { get; set; } = null;

	[Parameter]
	public int CameraId { get; set; }


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var authState = await AuthenticationState;
			User = await _userManager.FindByNameAsync(authState.User.Identity.Name);

			// SignalR 클라이언트 빌드
			//RTCHubConnection = new HubConnectionBuilder()
			//.WithUrl(_navigationManager.ToAbsoluteUri("/hub/rtc"), (opts) =>
			//{
			//	opts.HttpMessageHandlerFactory = (message) =>
			//	{
			//		if (message is HttpClientHandler clientHandler)
			//		{
			//			// SSL 무시
			//			clientHandler.ServerCertificateCustomValidationCallback +=
			//				(sender, certificate, chain, sslPolicyErrors) => { return true; };
			//		}
			//		return message;
			//	};
			//}).Build();

			//RTCHubConnection.On<string>("OnConnected", async connectionId =>
			//{
			//	ConnectionId = connectionId;
			//	await _jsRuntime.InvokeVoidAsync("init_rtc", ConnectionId);
			//});

			//RTCHubConnection.On("Welcome", async () =>
			//{
			//	var offer = await _jsRuntime.InvokeAsync<string>("send_offer");
			//	await RTCHubConnection.SendAsync("SendOffer", offer, RoomName);
			//});

			//RTCHubConnection.On<string>("ReceiveOffer", async receivedOffer =>
			//{
			//	var answer = await _jsRuntime.InvokeAsync<string>("send_answer", receivedOffer);
			//	await RTCHubConnection.SendAsync("SendAnswer", answer, RoomName);
			//});

			//RTCHubConnection.On<string>("ReceiveAnswer", async receivedAnswer =>
			//{
			//	await _jsRuntime.InvokeVoidAsync("receive_answer", receivedAnswer);
			//});

			//RTCHubConnection.On<string>("ReceiveIce", async receivedIce =>
			//{
			//	await _jsRuntime.InvokeVoidAsync("receive_ice", receivedIce);
			//});

			//await RTCHubConnection.StartAsync();

			//RoomName = $"{CameraId.ToString()}";
			//await RTCHubConnection.SendAsync("JoinRoom", RoomName);

			await _jsRuntime.InvokeVoidAsync("start_video", "video", "none");
			await _jsRuntime.InvokeVoidAsync("detect");
			await _jsRuntime.InvokeVoidAsync("mqtt", User.Id, CameraId);
		}
	}

	public async ValueTask DisposeAsync()
	{
		try
		{
			if (RTCHubConnection != null)
			{
				await RTCHubConnection.StopAsync();
				await RTCHubConnection.DisposeAsync();
			}

			await _jsRuntime.InvokeVoidAsync("stop_video", "video");
			await _jsRuntime.InvokeVoidAsync("unload");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"{ex.GetType()}: {ex.Message}");
		}
	}

	private List<string> items = new List<string> { "none", "coco", "fire", "face", "pose", "motion" };

	private string? selectedItem = "none";


	// 객체 검출 모델 선택
	private void OnSelectedItemChanged(ChangeEventArgs e)
	{
		selectedItem = e.Value?.ToString();
		_jsRuntime.InvokeVoidAsync("change_model", selectedItem);
	}

	// confidence threshold 변경
	private void ChangeConfidenceThreshold()
	{
		_jsRuntime.InvokeVoidAsync("change_confidence_threshold");
	}

	// 블루투스 연결
	private void Bluetooth()
	{
		_jsRuntime.InvokeVoidAsync("set_bluetooth");
	}
}
