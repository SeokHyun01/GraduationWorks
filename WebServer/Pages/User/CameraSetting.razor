@page "/user/{userId:guid}/camera/{cameraId:int}/setting"

@*@attribute [Authorize(Roles = SD.ROLE_CLIENT)]*@

@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject UserManager<IdentityUser> _userManager
@inject ICameraRepository _cameraRepository

@implements IAsyncDisposable

<div class="row row-cols-1 row-cols-sm-2 g-3">
	<div class="col">
		<select class="form-select mb-3" @onchange="OnSelectedItemChanged">
			@foreach (var item in items)
			{
				<option value="@item">@item</option>
			}
		</select>

		<button id="bluetooth" type="button" class="btn btn-outline-primary mb-3" @onclick="Bluetooth">Connect Bluetooth</button>
	</div>

	<div class="col">
		<div class="input-group mb-3">
			<span class="input-group-text">Confidence Threshold</span>
			<input id="conf" type="text" class="form-control" value="0.3" />
			<button id="changeConfidence" class="btn btn-outline-primary" @onclick="ChangeConfidenceThreshold">Apply</button>
		</div>
	</div>
</div>

<div class="row row-cols-1 row-cols-sm-2 g-3">
	<div class="col mb-3">
		<div class="card shadow-sm">
			<div class="card-header">Me</div>
			<div class="card-body" width="100%" height="225">
				<canvas id="canvas" style="width: 100%;"></canvas>
				<video id="video" style="transform: scaleX(-1); width: 100%;"></video>
			</div>
		</div>
	</div>

	<div id="caller" class="col mb-3" style="display: none;">
		<div class="card shadow-sm">
			<div class="card-header">Caller</div>
			<div class="card-body" width="100%" height="225">
				<video id="peer_video" style="transform: scaleX(-1); width: 100%;" autoplay></video>
			</div>
		</div>
	</div>
</div>


@code {
	//[CascadingParameter]
	//public Task<AuthenticationState> AuthenticationState { get; set; }
	//private IdentityUser? User { get; set; } = null;

	private string ConnectionId { get; set; } = string.Empty;
	private string RoomName { get; set; } = string.Empty;

	private HubConnection? RTCHubConnection { get; set; } = null;

	private bool isEnabledRTC { get; set; } = false;

	[Parameter]
	public Guid UserId { get; set; }

	[Parameter]
	public int CameraId { get; set; }


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var isCameraExist = (await _cameraRepository.GetAllByUserId(UserId.ToString())).Any();
			if (!isCameraExist)
			{
				Console.WriteLine("해당 카메라를 찾을 수 없습니다.");
				_navigationManager.NavigateTo("/Error");
			}

			//var authState = await AuthenticationState;
			//User = await _userManager.FindByNameAsync(authState.User.Identity.Name);

			// SignalR 클라이언트 빌드
			RTCHubConnection = new HubConnectionBuilder()
			.WithUrl(_navigationManager.ToAbsoluteUri("/hub/rtc"), (opts) =>
			{
				opts.HttpMessageHandlerFactory = (message) =>
				{
					if (message is HttpClientHandler clientHandler)
					{
						// SSL 무시
						clientHandler.ServerCertificateCustomValidationCallback +=
							(sender, certificate, chain, sslPolicyErrors) => { return true; };
					}
					return message;
				};
			}).Build();

			RTCHubConnection.On<string>("OnConnected", async connectionId =>
			{
				ConnectionId = connectionId;
			});

			RTCHubConnection.On("OnEnabledRTC", async () =>
			{
				if (!isEnabledRTC)
				{
					isEnabledRTC = true;
					await _jsRuntime.InvokeVoidAsync("set_display", "canvas", "none");
					await _jsRuntime.InvokeVoidAsync("set_display", "caller", "block");

					// SET video.style.display TO '';
					await _jsRuntime.InvokeVoidAsync("start_rtc");
					// RTC Peer Connection 객체 생성
					await _jsRuntime.InvokeVoidAsync("init_rtc", ConnectionId);
				}
			});

			RTCHubConnection.On("Welcome", async () =>
			{
				var offer = await _jsRuntime.InvokeAsync<string>("send_offer");
				await RTCHubConnection.SendAsync("SendOffer", offer, RoomName);
			});

			RTCHubConnection.On<string>("ReceiveOffer", async receivedOffer =>
			{
				var answer = await _jsRuntime.InvokeAsync<string>("send_answer", receivedOffer);
				await RTCHubConnection.SendAsync("SendAnswer", answer, RoomName);
			});

			RTCHubConnection.On<string>("ReceiveAnswer", async receivedAnswer =>
			{
				await _jsRuntime.InvokeVoidAsync("receive_answer", receivedAnswer);
			});

			RTCHubConnection.On<string>("ReceiveIce", async receivedIce =>
			{
				await _jsRuntime.InvokeVoidAsync("receive_ice", receivedIce);
			});

			RTCHubConnection.On("OnDisabledRTC", async () =>
			{
				if (isEnabledRTC)
				{
					isEnabledRTC = false;
					await _jsRuntime.InvokeVoidAsync("set_display", "caller", "none");
					await _jsRuntime.InvokeVoidAsync("set_display", "canvas", "block");

					await _jsRuntime.InvokeVoidAsync("stop_video", "peer_video");
					// SET video.style.display TO 'none';
					await _jsRuntime.InvokeVoidAsync("stop_rtc");
				}
			});

			await RTCHubConnection.StartAsync();

			await _jsRuntime.InvokeVoidAsync("start_video", "video", "none");
			await _jsRuntime.InvokeVoidAsync("detect");
			await _jsRuntime.InvokeVoidAsync("mqtt", UserId.ToString(), CameraId);

			RoomName = $"{CameraId.ToString()}";
			await RTCHubConnection.SendAsync("JoinRoom", RoomName);
		}
	}

	public async ValueTask DisposeAsync()
	{
		try
		{
			if (RTCHubConnection != null)
			{
				await RTCHubConnection.StopAsync();
				await RTCHubConnection.DisposeAsync();
			}

			await _jsRuntime.InvokeVoidAsync("teardown_rtc");
			await _jsRuntime.InvokeVoidAsync("unload");
			await _jsRuntime.InvokeVoidAsync("stop_video", "video");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"{ex.GetType()}: {ex.Message}");
		}
	}


	private List<string> items = new List<string> { "none", "coco", "fire", "face", "pose", "motion" };
	private string? selectedItem = "none";


	// 객체 검출 모델 선택
	private void OnSelectedItemChanged(ChangeEventArgs e)
	{
		selectedItem = e.Value?.ToString();
		_jsRuntime.InvokeVoidAsync("change_model", selectedItem);
	}

	// confidence threshold 변경
	private void ChangeConfidenceThreshold()
	{
		_jsRuntime.InvokeVoidAsync("change_confidence_threshold");
	}

	// 블루투스 연결
	private void Bluetooth()
	{
		_jsRuntime.InvokeVoidAsync("set_bluetooth");
	}
}
