@page "/user/camera/setting/{cameraId:int}"

@attribute [Authorize(Roles = SD.ROLE_CLIENT)]

@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject UserManager<IdentityUser> _userManager
@implements IAsyncDisposable


<div style="display: flex; align-items: center;">
	<h6 style="margin-right: 10px;">Select Object for Detection</h6>
	<select style="width: 200px;" @onchange="OnSelectedItemChanged">
		@foreach (var item in items)
		{
			<option value="@item">@item</option>
		}
	</select>	

	<button style="margin-left: 10px; margin-top: -5px; height: 1.25em;  line-height: 5px;  background-color: yellow;" @onclick="Bluetooth" id="bluetooth">connect bluetooth</button>
</div>

<div style="display: flex; align-items: center;">
	<h6 style="margin-right: 10px;">Confidence Threshold</h6>
	<input style="width: 200px; height: 1.25em; margin-top: -5px;" type="text" id="conf" value="0.3" />
	<button style="margin-left: 10px; margin-top: -5px; height: 1.25em;  line-height: 5px;"
	@onclick="ChangeConfidenceThreshold" id="changeConfidence">change</button>
</div>

<canvas></canvas>
<video id="video" width="224" height="224"></video>

@* @if (IsLoading)
{
	<p class="placeholder-glow">
		<span class="placeholder col-10 bg-primary placeholder-lg"></span>
		<span class="placeholder col-12 bg-primary placeholder-lg"></span>
		<span class="placeholder col-6 bg-primary placeholder-lg"></span>
	</p>
} else
{
	<h3>CameraSetting</h3>
} *@


@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationState { get; set; }
	private IdentityUser? User { get; set; } = null;

	@* private bool IsLoading { get; set; } = true; *@

	[Parameter]
	public int CameraId { get; set; }


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var authState = await AuthenticationState;
			User = await _userManager.FindByNameAsync(authState.User.Identity.Name);

			await _jsRuntime.InvokeVoidAsync("start_video", "video");
			await _jsRuntime.InvokeVoidAsync("detect");
			await _jsRuntime.InvokeVoidAsync("mqtt", User.Id, CameraId);
		}
	}

	public async ValueTask DisposeAsync()
	{
		try
		{
			await _jsRuntime.InvokeVoidAsync("stop_video", "video");
			await _jsRuntime.InvokeVoidAsync("unload");

		}
		catch (Exception ex)
		{
			Console.WriteLine($"{ex.GetType()}: {ex.Message}");
		}
	}

	private List<string> items = new List<string> { "none", "coco", "fire", "face", "pose", "motion" };

	private string? selectedItem = "none";


	// 객체 검출 모델 선택
	private void OnSelectedItemChanged(ChangeEventArgs e)
	{
		selectedItem = e.Value?.ToString();
		_jsRuntime.InvokeVoidAsync("change_model", selectedItem);
	}

	// confidence threshold 변경
	private void ChangeConfidenceThreshold()
	{
		_jsRuntime.InvokeVoidAsync("change_confidence_threshold");
	}

	// 블루투스 연결
	private void Bluetooth()
	{
		_jsRuntime.InvokeVoidAsync("set_bluetooth");
	}
}
