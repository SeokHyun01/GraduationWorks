@page "/user/camera/{cameraId:int}"

@attribute [Authorize(Roles = SD.ROLE_CLIENT)]

@inject ICameraRepository _cameraRepository
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject UserManager<IdentityUser> _userManager

@implements IAsyncDisposable


<div class="row row-cols-1 row-cols-sm-2 g-3">
	<div class="col mb-3">
		<div class="card shadow-sm">
			<div class="card-header">Me</div>
			<div class="card-body" width="100%" height="225">
				<video id="video" style="transform: scaleX(-1); width:100%;"></video>
			</div>
		</div>
	</div>

	<div id="caller" style="display: none;">
		<div class="col mb-3">
			<div class="card shadow-sm">
				<div class="card-header">Caller</div>
				<div class="card-body" width="100%" height="225">
					<video id="peer_video" style="transform: scaleX(-1); width:100%;" autoplay></video>
					<span class="card-text mt-3">Angle</span>
					<input id="input" type="range" class="form-range" style="width: 50%;" value=@(Camera.Angle) min="0" max="180" step="1" @onchange="(args)=>SetCameraAngle(args, CameraId)" />
				</div>
			</div>
		</div>
	</div>
</div>


@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationState { get; set; }
	private IdentityUser? User { get; set; } = null;

	[Parameter]
	public int CameraId { get; set; }

	private CameraDTO Camera { get; set; } = new CameraDTO();

	private IMqttClient? MqttClient { get; set; } = null;

	private HubConnection? RTCHubConnection { get; set; } = null;
	private string RoomName { get; set; } = string.Empty;
	private string ConnectionId { get; set; } = string.Empty;

	private bool isEnabledRTC { get; set; } = false;


	private async ValueTask getCamera(int id)
	{
		Camera = await _cameraRepository.Get(id);
		StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var authState = await AuthenticationState;
			User = await _userManager.FindByNameAsync(authState.User.Identity.Name);

			// MQTT
			var mqttFactory = new MqttFactory();
			MqttClient = mqttFactory.CreateMqttClient();

			MqttClient.ApplicationMessageReceivedAsync += async e =>
			{
				var message = e.ApplicationMessage;
				if (e.ApplicationMessage.Topic == "camera/update/angle/ack")
				{
					var cameraMessage = JsonSerializer.Deserialize<CameraDTO>(message.PayloadSegment);
					if (cameraMessage != null)
					{
						var input = "input";
						await _jsRuntime.InvokeVoidAsync("set_input_disabled", input, false);
					}
				}
			};

			var mqttClientOptions = new MqttClientOptionsBuilder()
				.WithTcpServer("ictrobot.hknu.ac.kr", 8085)
				.Build();
			await MqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);

			var mqttSubscribeOptions = mqttFactory.CreateSubscribeOptionsBuilder()
				.WithTopicFilter(f => { f.WithTopic("camera/image"); })
				.WithTopicFilter(f => { f.WithTopic("camera/update/angle/ack"); })
				.Build();

			await MqttClient.SubscribeAsync(mqttSubscribeOptions, CancellationToken.None);

			// SignalR 클라이언트 빌드
			RTCHubConnection = new HubConnectionBuilder()
			.WithUrl(_navigationManager.ToAbsoluteUri("/hub/rtc"), (opts) =>
			{
				opts.HttpMessageHandlerFactory = (message) =>
				{
					if (message is HttpClientHandler clientHandler)
					{
						// SSL 무시
						clientHandler.ServerCertificateCustomValidationCallback +=
							(sender, certificate, chain, sslPolicyErrors) => { return true; };
					}
					return message;
				};
			}).Build();

			RTCHubConnection.On<string>("OnConnected", async connectionId =>
			{
				ConnectionId = connectionId;
			});

			RTCHubConnection.On("OnEnabledRTC", async () =>
			{
				if (!isEnabledRTC)
				{
					isEnabledRTC = true;
					await _jsRuntime.InvokeVoidAsync("set_display", "caller", "block");

					// RTC Peer Connection 객체 생성
					await _jsRuntime.InvokeVoidAsync("init_rtc", ConnectionId);
				}
			});

			RTCHubConnection.On("Welcome", async () =>
			{
				var offer = await _jsRuntime.InvokeAsync<string>("send_offer");
				await RTCHubConnection.SendAsync("SendOffer", offer, RoomName);
			});

			RTCHubConnection.On<string>("ReceiveOffer", async receivedOffer =>
			{
				var answer = await _jsRuntime.InvokeAsync<string>("send_answer", receivedOffer);
				await RTCHubConnection.SendAsync("SendAnswer", answer, RoomName);
			});

			RTCHubConnection.On<string>("ReceiveAnswer", async receivedAnswer =>
			{
				await _jsRuntime.InvokeVoidAsync("receive_answer", receivedAnswer);
			});

			RTCHubConnection.On<string>("ReceiveIce", async receivedIce =>
			{
				await _jsRuntime.InvokeVoidAsync("receive_ice", receivedIce);
			});

			RTCHubConnection.On("OnDisabledRTC", async () =>
			{
				if (isEnabledRTC)
				{
					isEnabledRTC = false;
					await _jsRuntime.InvokeVoidAsync("set_display", "caller", "none");

					await _jsRuntime.InvokeVoidAsync("stop_video", "peer_video");
				}
			});

			await RTCHubConnection.StartAsync();

			// Etc.
			await getCamera(CameraId);
			await _jsRuntime.InvokeVoidAsync("start_video", "video");

			RoomName = $"{CameraId.ToString()}";
			await RTCHubConnection.SendAsync("JoinRoom", RoomName);
		}
	}

	private async Task SetCameraAngle(ChangeEventArgs args, int id)
	{
		if (args.Value != null)
		{
			var angle = int.Parse(args.Value.ToString());
			var camera = await _cameraRepository.Get(id);
			if (camera != null)
			{
				camera.Angle = angle;
				await _cameraRepository.Update(camera);
			}
			var cameraMessage = new CameraDTO
				{
					Id = id,
					Angle = angle,
				};
			var payload = JsonSerializer.Serialize<CameraDTO>(cameraMessage);

			var mqttFactory = new MqttFactory();
			using (var mqttClient = mqttFactory.CreateMqttClient())
			{
				var mqttClientOptions = new MqttClientOptionsBuilder()
					.WithTcpServer("ictrobot.hknu.ac.kr", 8085)
					.Build();
				await mqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);
				var applicationMessage = new MqttApplicationMessageBuilder()
					.WithTopic("camera/update/angle/syn")
					.WithPayload(payload)
					.Build();
				await mqttClient.PublishAsync(applicationMessage, CancellationToken.None);
				await mqttClient.DisconnectAsync();
			}

			var input = $"input-{cameraMessage.Id}";
			await _jsRuntime.InvokeVoidAsync("set_input_disabled", input, true);
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (MqttClient != null && MqttClient.IsConnected)
		{
			await MqttClient.DisconnectAsync();
		}

		if (RTCHubConnection != null)
		{
			await RTCHubConnection.StopAsync();
			await RTCHubConnection.DisposeAsync();
		}

		await _jsRuntime.InvokeVoidAsync("teardown_rtc");
		await _jsRuntime.InvokeVoidAsync("stop_video", "video");
	}
}
