@page "/user/event"

@attribute [Authorize(Roles = SD.ROLE_CLIENT)]

@inject IEventRepository _eventRepository
@inject IEventVideoRepository _eventVideoRepository
@inject UserManager<IdentityUser> _userManager


@if (EventVideos.Any())
{
<div class="row">
	<SfGrid @ref="eventVideoGrid" DataSource="@EventVideos" Height="800" AllowFiltering="true" AllowSorting="true" AllowGrouping="true" AllowPaging="true" Toolbar="@ToolbarItems">
		<GridEditSettings AllowAdding="false" AllowDeleting="true" AllowEditing="false"></GridEditSettings>
		<GridEvents OnActionBegin="ActionHandler" TValue="EventVideoDTO"></GridEvents>
		<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu" ></GridFilterSettings>
		<GridSortSettings AllowUnsort="false">
			<GridSortColumns>
				<GridSortColumn Field="Id" Direction="SortDirection.Ascending"></GridSortColumn>
			</GridSortColumns>
		</GridSortSettings>
		<GridPageSettings PageSize="5" PageCount="5" PageSizes="true"></GridPageSettings>
		<GridColumns>
			<GridColumn Field="Id" HeaderText="Video ID" Width="120" IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Required=true, Number=true})" Type="ColumnType.Integer"></GridColumn>
			<GridColumn HeaderText="Video" Width="240">
				<Template>
					@{
						var video = (context as EventVideoDTO);
						<div>
							<video style="width: 10rem;" controls>
								<source src=@(Regex.Match(video.Path, @"videos/[\w-]+\.mp4").Value) type="video/mp4">
							</video>
						</div>
					}
				</Template>
			</GridColumn>
			<GridColumn Field="Date" HeaderText="Date" Width="120" ValidationRules="@(new ValidationRules{ Required=true})" Format="d" Type="ColumnType.Date"></GridColumn>
			<GridColumn Field="CameraId" HeaderText="Camera ID" Width="120" ValidationRules="@(new ValidationRules { Required=true, Number=true})" Type="ColumnType.Integer"></GridColumn>
			<GridColumn Field="Labels" HeaderText="Labels" Width="240" ValidationRules="@(new ValidationRules{ Required=true})" Type="ColumnType.String"></GridColumn>
		</GridColumns>
	</SfGrid>
</div>

} else
{
	<p>Not found</p>
}


@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationState { get; set; }
	private IdentityUser? User { get; set; } = null;

	private IEnumerable<EventDTO> Events { get; set; } = new List<EventDTO>();
	private IEnumerable<EventVideoDTO> EventVideos { get; set; } = new List<EventVideoDTO>();

	public SfGrid<EventVideoDTO> eventVideoGrid;
	private List<string> ToolbarItems = new List<string>() { "Delete", "Cancel" };


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var authState = await AuthenticationState;
			User = await _userManager.FindByNameAsync(authState.User.Identity.Name);
			await getEventVideos(User.Id);
		}
	}

	private async ValueTask getEventVideos(string userId)
	{
		EventVideos = await _eventVideoRepository.GetAllByUserId(userId);
		StateHasChanged();
	}

	private async Task OnEventDeleted(EventVideoDTO eventVideo)
	{
		await _eventVideoRepository.Delete(eventVideo.Id);
		await getEventVideos(User.Id);
	}

	public async void ActionHandler(ActionEventArgs<EventVideoDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await _eventVideoRepository.Delete(args.Data.Id);
            eventVideoGrid.Refresh();
        }
    }
}
