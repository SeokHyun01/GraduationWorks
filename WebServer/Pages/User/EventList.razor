@page "/user/event"

@attribute [Authorize(Roles = SD.ROLE_CLIENT)]

@inject ICameraRepository _cameraRepository
@inject IEventRepository _eventRepository
@inject IEventVideoRepository _eventVideoRepository
@inject UserManager<IdentityUser> _userManager

@if (IsLoading)
{
	<span class="placeholder-glow w-50 bg-primary"></span>
	<span class="placeholder-glow w-75 bg-primary"></span>
	<span class="placeholder-glow w-25 bg-primary"></span>
}
else
{
	<div class="row">
		@if (EventVideos.Any())
		{

			<SfGrid @ref="eventVideoGrid" DataSource="@EventVideos" Height="800" AllowFiltering="true" AllowSorting="true" AllowGrouping="true" AllowPaging="true" Toolbar="@ToolbarItems">
				<GridEditSettings AllowAdding="false" AllowDeleting="true" AllowEditing="false"></GridEditSettings>
				<GridEvents OnActionBegin="ActionHandler" TValue="EventVideoDTO"></GridEvents>
				<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
				<GridColumns>
					<GridColumn Field="Id" HeaderText="Video ID" Width="120" IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Required=true, Number=true})" Type="ColumnType.Integer"></GridColumn>
					<GridColumn HeaderText="Video" Width="480">
						<Template>
							@{
								var video = (context as EventVideoDTO);
								<video style="width: 30rem;" controls>
									<source src=@(Regex.Match(video.Path, @"videos/[\w-]+\.mp4").Value) type="video/mp4">
								</video>
							}
						</Template>
					</GridColumn>
					<GridColumn Field="Date" HeaderText="Date" Width="120" ValidationRules="@(new ValidationRules{ Required=true})" Format="yyyy-MM-ddTHH:MM:ss" Type="ColumnType.Date"></GridColumn>
					<GridColumn Field="CameraId" HeaderText="Camera ID" Width="120" ValidationRules="@(new ValidationRules { Required=true, Number=true})" Type="ColumnType.Integer"></GridColumn>
					<GridColumn HeaderText="Camera Name" Width="120" Type="ColumnType.String">
						<Template>
							@{
								var video = (context as EventVideoDTO);
								var camera = Cameras.FirstOrDefault(x => x.Id == video.CameraId);
								var name = camera.Name;
								<p>@name</p>
							}
						</Template>
					</GridColumn>
					<GridColumn Field="Labels" HeaderText="Labels" Width="240" ValidationRules="@(new ValidationRules{ Required=true})" Type="ColumnType.String"></GridColumn>
				</GridColumns>
			</SfGrid>
		}
		else
		{
			<p>Not found</p>
		}
	</div>
}


@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationState { get; set; }
	private IdentityUser? User { get; set; } = null;

	private IEnumerable<CameraDTO> Cameras { get; set; } = new List<CameraDTO>();
	private IEnumerable<EventVideoDTO> EventVideos { get; set; } = new List<EventVideoDTO>();

	public SfGrid<EventVideoDTO> eventVideoGrid;
	private List<string> ToolbarItems = new List<string>() { "Delete" };

	private bool IsLoading { get; set; } = true;


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var authState = await AuthenticationState;
			User = await _userManager.FindByNameAsync(authState.User.Identity.Name);
			await getEventVideos(User.Id);
		}
	}

	private async ValueTask getEventVideos(string userId)
	{
		if (!IsLoading)
		{
			IsLoading = true;
			StateHasChanged();
		}

		Cameras = await _cameraRepository.GetAllByUserId(userId);
		EventVideos = await _eventVideoRepository.GetAllByUserId(userId);
		// await eventVideoGrid.Refresh();

		IsLoading = false;
		StateHasChanged();
	}

	public async void ActionHandler(ActionEventArgs<EventVideoDTO> args)
	{
		if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
		{
			await _eventVideoRepository.Delete(args.Data.Id);
			await getEventVideos(User.Id);
		}
	}
}
