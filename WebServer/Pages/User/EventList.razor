@page "/user/event"

@using Syncfusion.Blazor.Navigations;

@attribute [Authorize(Roles = SD.ROLE_CLIENT)]

@inject NavigationManager _navigationManager

@inject UserManager<IdentityUser> _userManager

@inject ICameraRepository _cameraRepository
@inject IEventRepository _eventRepository
@inject IBoundingBoxRepository _boundingBoxRepository
@inject IEventVideoRepository _eventVideoRepository


@if (IsLoading)
{
	<p class="placeholder-glow">
		<span class="placeholder w-50 bg-primary"></span>
		<span class="placeholder w-75 bg-primary"></span>
		<span class="placeholder w-25 bg-primary"></span>
	</p>
}
else
{
	@if (EventVideos.Any())
	{
		<div class="row">
			<SfButton class="mb-1" @onclick="ToggleExpandCollapse">
				@if (AllRowsExpanded)
				{
					<span>Collapse All</span>
				}
				else
				{
					<span>Expand All</span>
				}
			</SfButton>
			<SfGrid @ref="EventGrid" DataSource="@EventViewModel" Height="1000" AllowFiltering="true" AllowSorting="true" AllowGrouping="true" AllowPaging="true" Toolbar="@ToolbarItems">
				<GridEvents OnActionBegin="OnActionBeginHandler" TValue="EventViewModel"></GridEvents>
				<GridSortSettings>
					<GridSortColumns>
						<GridSortColumn Field="Id" Direction="SortDirection.Descending"></GridSortColumn>
					</GridSortColumns>
				</GridSortSettings>
				<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
				<GridEditSettings ShowDeleteConfirmDialog="true" AllowDeleting="true"></GridEditSettings>
				<GridPageSettings PageSizes="true" PageSize="5" PageCount="5"></GridPageSettings>
				<GridSelectionSettings CheckboxOnly="true" PersistSelection="true"></GridSelectionSettings>
				<GridTemplates>
					<DetailTemplate>
						@{
							var currentEvent = (context as EventViewModel);
						}
						<div style="padding:20px">
							<SfTab>
								<TabItems>
									<TabItem>
										<ChildContent>
											<TabHeader Text="Video"></TabHeader>
										</ChildContent>
										<ContentTemplate>
											<video style="width: 15rem;" controls autoplay>
												<source src=@(Regex.Match(currentEvent.Path, @"videos/[\w-]+\.mp4").Value) type="video/mp4">
											</video>
										</ContentTemplate>
									</TabItem>
									<TabItem>
										<ChildContent>
											<TabHeader Text="Details"></TabHeader>
										</ChildContent>
										<ContentTemplate>
											<div style="padding:25px">
												<SfGrid DataSource="@BoundingBoxes" AllowFiltering="true" AllowSorting="true" AllowPaging="true" Query="@(new Query().Where("Event.EventVideoId", "equal", currentEvent.Id))">
													<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
													<GridPageSettings PageSizes="true" PageSize="5" PageCount="5"></GridPageSettings>
													<GridColumns>
														<GridColumn HeaderText="Image" Width="100">
															<Template Context="boundingBoxContext">
																@{
																	var boundingBox = (boundingBoxContext as BoundingBoxDTO);
																	if (boundingBox == null)
																	{
																		return;
																	}
																	var imagePath = boundingBox.Event.Path;
																	if (string.IsNullOrEmpty(imagePath))
																	{
																		return;
																	}
																	var x = boundingBox.X;
																	var y = boundingBox.Y;
																	var width = boundingBox.Width;
																	var height = boundingBox.Height;
																	var boundingBoxImagePath = CropAndEncodeImage(imagePath, x, y, width, height);
																}
																<img style="width: 15rem;" src="@boundingBoxImagePath" alt="BoundingBox Image" />
															</Template>
														</GridColumn>
														<GridColumn Field="Label" HeaderText="Label" ValidationRules="@(new ValidationRules{ Required=true })" Width="100" Type="ColumnType.String"></GridColumn>
														<GridColumn Field="Confidence" HeaderText="Confidence" ValidationRules="@(new ValidationRules{ Required=true, Number=true })" Width="100" Type="ColumnType.Long"></GridColumn>
													</GridColumns>
												</SfGrid>
											</div>
										</ContentTemplate>
									</TabItem>
								</TabItems>
							</SfTab>
						</div>
					</DetailTemplate>
				</GridTemplates>

				<GridColumns>
					<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
					<GridColumn Field="Id" HeaderText="Id" ValidationRules="@(new ValidationRules{ Required=true, Number=true })" Width="100" Type="ColumnType.Integer"></GridColumn>
					<GridColumn Field="CameraName" HeaderText="Camera Name" ValidationRules="@(new ValidationRules{ Required=true })" Width="100" Type="ColumnType.String"></GridColumn>
					<GridColumn Field="Date" HeaderText="Date" Width="100" ValidationRules="@(new ValidationRules{ Required=true })" Format="@DATETIME_FORMAT" Type="ColumnType.Date">
						<FilterTemplate>
							@{
								<SfDateRangePicker Width="100" ShowClearButton="true" @bind-StartDate="StartDate" @bind-EndDate="EndDate" TValue="DateTime" Format="@DATETIME_FORMAT">
									<DateRangePickerEvents TValue="DateTime" ValueChange="(args)=>OnDateChanged(args)"></DateRangePickerEvents>
								</SfDateRangePicker>
							}
						</FilterTemplate>
					</GridColumn>
					<GridColumn Field="Labels" HeaderText="Labels" ValidationRules="@(new ValidationRules{ Required=true })" Width="100" Type="ColumnType.String"></GridColumn>
				</GridColumns>
			</SfGrid>
		</div>
	}
	else
	{
		<p>Not found.</p>
	}
}


@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationState { get; set; }
	private IdentityUser? User { get; set; } = null;

	private bool IsLoading { get; set; } = true;

	private List<EventViewModel> EventViewModel { get; set; } = new();

	private IEnumerable<EventVideoDTO> EventVideos { get; set; } = new List<EventVideoDTO>();
	private List<BoundingBoxDTO> BoundingBoxes { get; set; } = new List<BoundingBoxDTO>();

	private IEnumerable<string> ToolbarItems = new List<string>() { "Delete" };
	private SfGrid<EventViewModel> EventGrid { get; set; }
	private bool AllRowsExpanded { get; set; } = false;

	private const string DATETIME_FORMAT = "yyyy-MM-ddTHH:mm:ss";
	private DateTime StartDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second);
	private DateTime EndDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second);

	private HubConnection? hubConnection;

	private IMqttClient? MqttClient { get; set; } = null;


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var authState = await AuthenticationState;
			User = await _userManager.FindByNameAsync(authState.User.Identity.Name);

			var mqttFactory = new MqttFactory();
			MqttClient = mqttFactory.CreateMqttClient();

			MqttClient.ApplicationMessageReceivedAsync += async e =>
			{
				var message = e.ApplicationMessage;
				if (e.ApplicationMessage.Topic == "event/oncreated")
				{
					var onEventCreatedMessage = JsonSerializer.Deserialize<OnEventCreatedDTO>(message.PayloadSegment);
					if (onEventCreatedMessage == null)
					{
						return;
					}
					var userId = onEventCreatedMessage.UserId;
					var videoId = onEventCreatedMessage.VideoId;

					if (userId != User.Id)
					{
						return;
					}

					var video = await _eventVideoRepository.Get(videoId);
					BoundingBoxes.AddRange(video.Events.SelectMany(x => x.BoundingBoxes).ToList());

					var first = video.Events.FirstOrDefault();

					DateTime? date = null;
					try
					{
						date = DateTime.ParseExact(first.Date, DATETIME_FORMAT, CultureInfo.InvariantCulture);
					}
					catch (FormatException)
					{
						date = new DateTime();
					}

					var cameraName = first.Camera.Name;

					var labels = new HashSet<string>();

					foreach (var boundingBox in BoundingBoxes)
					{
						if (boundingBox.Event.EventVideoId == video.Id)
						{
							if (!string.IsNullOrEmpty(boundingBox.Label))
							{
								labels.Add(boundingBox.Label);
							}
						}
					}
					var path = video.Path;
					EventViewModel.Add(new EventViewModel()
						{
							Id = video.Id,
							Date = date.Value,
							CameraName = cameraName,
							Labels = string.Join(", ", labels),
							Path = path,
						});

					if (EventViewModel.Any())
					{
						await EventGrid.Refresh();
						if (AllRowsExpanded)
						{
							await ExpandAll();
						}
					}
				}
			};

			var mqttClientOptions = new MqttClientOptionsBuilder()
				.WithTcpServer("ictrobot.hknu.ac.kr", 8085)
				.Build();
			await MqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);

			var mqttSubscribeOptions = mqttFactory.CreateSubscribeOptionsBuilder()
				.WithTopicFilter(f => { f.WithTopic("event/oncreated"); })
				.Build();

			await MqttClient.SubscribeAsync(mqttSubscribeOptions, CancellationToken.None);

			await getEventVideos(User.Id);

			if (EventViewModel.Any())
			{
				await ToggleExpandCollapse();
			}
		}
	}

	private async ValueTask getEventVideos(string userId)
	{
		if (!IsLoading)
		{
			IsLoading = true;
			StateHasChanged();
		}
		EventViewModel = new List<EventViewModel>();
		EventVideos = await _eventVideoRepository.GetAllByUserId(userId);
		BoundingBoxes = EventVideos.SelectMany(x => x.Events.SelectMany(e => e.BoundingBoxes)).ToList();
		foreach (var video in EventVideos)
		{
			var first = video.Events.FirstOrDefault();
			if (first == null)
			{
				continue;
			}

			DateTime? date = null;
			try
			{
				date = DateTime.ParseExact(first.Date, DATETIME_FORMAT, CultureInfo.InvariantCulture);
			}
			catch (FormatException)
			{
				date = new DateTime();
			}

			var cameraName = first.Camera?.Name;
			var labels = new HashSet<string>();
			foreach (var boundingBox in BoundingBoxes)
			{
				if (boundingBox.Event.EventVideoId == video.Id)
				{
					if (!string.IsNullOrEmpty(boundingBox.Label))
					{
						labels.Add(boundingBox.Label);
					}
				}
			}
			var path = video.Path;
			EventViewModel.Add(new EventViewModel()
				{
					Id = video.Id,
					Date = date.Value,
					CameraName = cameraName,
					Labels = string.Join(", ", labels),
					Path = path,
				});
		}

		IsLoading = false;
		StateHasChanged();
	}

	private async Task OnActionBeginHandler(ActionEventArgs<EventViewModel> args)
	{
		if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
		{
			IsLoading = true;
			await InvokeAsync(StateHasChanged);

			await _eventVideoRepository.Delete(args.Data.Id);
			await getEventVideos(User.Id);
			if (EventViewModel.Any())
			{
				await EventGrid.Refresh();
			}
		}

		else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Filtering && args.CurrentFilteringColumn == "Date")
		{
			args.Cancel = true;
			if (EventGrid.FilterSettings.Columns == null)
			{
				EventGrid.FilterSettings.Columns = new List<GridFilterColumn>();
			}
			if (EventGrid.FilterSettings.Columns.Count > 0)
			{
				EventGrid.FilterSettings.Columns.RemoveAll(c => c.Field == "Date");
			}

			var columns = await EventGrid.GetColumns();
			string fUid = columns[1].Uid;
			EventGrid.FilterSettings.Columns.Add(new GridFilterColumn
				{
					Field = "Date",
					Operator = Syncfusion.Blazor.Operator.GreaterThanOrEqual,
					Predicate = "and",
					Value = StartDate,
					Uid = fUid
				});
			EventGrid.FilterSettings.Columns.Add(new GridFilterColumn
				{
					Field = "Date",
					Operator = Syncfusion.Blazor.Operator.LessThanOrEqual,
					Predicate = "and",
					Value = EndDate,
					Uid = fUid
				});
			await EventGrid.Refresh();
		}

		if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Refresh) && EventViewModel.Any())
		{
			if (AllRowsExpanded)
			{
				await ExpandAll();
			} else
			{
				await CollapseAll();
			}
		}
	}

	private async Task ToggleExpandCollapse()
	{
		if (AllRowsExpanded)
		{
			await CollapseAll();
			AllRowsExpanded = false;
			await InvokeAsync(StateHasChanged);
		}
		else
		{
			await ExpandAll();
			AllRowsExpanded = true;
			await InvokeAsync(StateHasChanged);
		}
	}

	private async Task ExpandAll()
	{
		await EventGrid.ExpandAllDetailRowAsync();
	}

	private async Task CollapseAll()
	{
		await EventGrid.CollapseAllDetailRowAsync();
	}

	private string CropAndEncodeImage(string imagePath, float x, float y, float width, float height)
	{
		using (var image = Image.Load(imagePath))
		{
			image.Mutate(ctx => ctx.Crop(new Rectangle((int)x, (int)y, (int)width, (int)height)));

			using (MemoryStream memory = new MemoryStream())
			{
				image.Save(memory, new JpegEncoder());
				byte[] bytes = memory.ToArray();
				return "data:image/jpeg;base64," + Convert.ToBase64String(bytes);
			}
		}
	}

	private void OnDateChanged(RangePickerEventArgs<DateTime> args)
	{
		StartDate = args.StartDate;
		EndDate = args.EndDate;
	}
}
