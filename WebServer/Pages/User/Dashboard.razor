@page "/user/dashboard"

@attribute [Authorize(Roles = SD.ROLE_CLIENT)]

@inject IJSRuntime _jsRuntime
@inject UserManager<IdentityUser> _userManager

@inject ICameraRepository _cameraRepository


@if (IsLoading)
{
	<p class="placeholder-glow">
		<span class="placeholder w-50 bg-primary"></span>
		<span class="placeholder w-75 bg-primary"></span>
		<span class="placeholder w-25 bg-primary"></span>
	</p>
}
else
{
	@if (Cameras.Any())
	{
		<div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-3">
			@foreach (var camera in Cameras)
			{
				<div class="col">
					<div class="card shadow-sm">
						<div class="card-header" style="text-align: center;">
							<span class="card-text">@camera.Name</span>
						</div>
						<div class="card-body" width="100%" height="225">
							<img id="@($"img-{camera.Id}")" style="width: 100%;" class="mt-3">
						</div>
					</div>
				</div>
			}
		</div>
	}
	else
	{
		<p>Not found.</p>
	}
}


@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationState { get; set; }
	private IdentityUser? User { get; set; } = null;

	private bool IsLoading { get; set; } = true;

	private IEnumerable<CameraDTO> Cameras { get; set; } = new List<CameraDTO>();

	private IMqttClient? MqttClient { get; set; } = null;


	private async ValueTask getCameras(string userId)
	{
		if (!IsLoading)
		{
			IsLoading = true;
			StateHasChanged();
		}

		Cameras = await _cameraRepository.GetAllByUserId(User.Id);

		IsLoading = false;
		StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var authState = await AuthenticationState;
			User = await _userManager.FindByNameAsync(authState.User.Identity.Name);

			var mqttFactory = new MqttFactory();
			MqttClient = mqttFactory.CreateMqttClient();
			MqttClient.ApplicationMessageReceivedAsync += async e =>
			{
				var message = e.ApplicationMessage;
				if (message.Topic == "camera/image")
				{
					var cameraMessage = JsonSerializer.Deserialize<CameraDTO>(message.PayloadSegment);
					if (cameraMessage != null)
					{
						await _jsRuntime.InvokeVoidAsync("set_img_src", $"img-{cameraMessage.Id}", cameraMessage.Image);
					}
				}
			};

			var mqttClientOptions = new MqttClientOptionsBuilder()
			.WithTcpServer("ictrobot.hknu.ac.kr", 8085)
			.Build();
			await MqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);

			var mqttSubscribeOptions = mqttFactory.CreateSubscribeOptionsBuilder()
			.WithTopicFilter(f => { f.WithTopic("camera/image"); })
			.Build();
			await MqttClient.SubscribeAsync(mqttSubscribeOptions, CancellationToken.None);

			await getCameras(User.Id);
		}
	}
}
