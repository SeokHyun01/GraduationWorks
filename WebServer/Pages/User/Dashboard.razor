@page "/user/dashboard"

@attribute [Authorize(Roles = SD.ROLE_CLIENT)]

@inject IJSRuntime _jsRuntime
@inject UserManager<IdentityUser> _userManager

@inject ICameraRepository _cameraRepository


@if (IsLoading)
{
    <p class="placeholder-glow">
        <span class="placeholder w-50 bg-primary"></span>
        <span class="placeholder w-75 bg-primary"></span>
        <span class="placeholder w-25 bg-primary"></span>
    </p>
}
else
{
    @if (Cameras.Any())
    {
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-3">
            @foreach (var camera in Cameras)
            {
                <div class="col">
                    <div class="card shadow-sm">
                        <div class="card-header" style="text-align: center;">
                            <span class="card-text">@($"{camera.Name}")</span>
                        </div>
                        <div width="100%" height="225">
                            <img id="@($"img-{camera.Id}")" src="data:image/svg+xml,%3Csvg class='bd-placeholder-img card-img-top' width='100%25' height='225' xmlns='http://www.w3.org/2000/svg' role='img' aria-label='Placeholder: Thumbnail' preserveAspectRatio='xMidYMid slice' focusable='false'%3E%3Ctitle%3EPlaceholder%3C/title%3E%3Crect width='100%25' height='100%25' fill='%2355595c'%3E%3C/rect%3E%3Ctext x='50%25' y='50%25' fill='%23eceeef' text-anchor='middle' dominant-baseline='middle' dy='.3em'%3EThumbnail%3C/text%3E%3C/svg%3E" style="width: 100%;" class="mt-0">
                            <div class="d-flex justify-content-between align-items-center m-3">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-sm btn-outline-danger"
                                    @onclick="()=>OnCameraDeleted(camera)">
                                        Remove
                                    </button>
                                    <input id=@($"input-{camera.Id}") type="range" class="form-range" value=@(camera.Angle) min="0"
                                           max="180" step="1" @onchange="(args)=>SetCameraAngle(args, camera.Id)" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>Not found.</p>
    }
}


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    private IdentityUser? User { get; set; } = null;
    private Dictionary<string, string> UserNames { get; set; } = new Dictionary<string, string>();

    private bool IsLoading { get; set; } = true;

    private IEnumerable<CameraDTO> Cameras { get; set; } = new List<CameraDTO>();

    private IMqttClient? MqttClient { get; set; } = null;


    private async Task OnCameraDeleted(CameraDTO camera)
    {
        await _cameraRepository.Delete(camera.Id);
        await getCameras(User.Id);
    }

    private async ValueTask getCameras(string userId)
    {
        if (!IsLoading)
        {
            IsLoading = true;
            StateHasChanged();
        }

        Cameras = await _cameraRepository.GetAll();

        var userIds = Cameras.Select(x => x.UserId).ToHashSet();
        foreach (var id in userIds)
        {
            var user = await _userManager.FindByIdAsync(id);
            UserNames[id] = user.UserName;
        }

        IsLoading = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationState;
            User = await _userManager.FindByNameAsync(authState.User.Identity.Name);

            var mqttFactory = new MqttFactory();
            MqttClient = mqttFactory.CreateMqttClient();
            MqttClient.ApplicationMessageReceivedAsync += async e =>
            {
                var message = e.ApplicationMessage;
                if (message.Topic == "camera/image")
                {
                    var cameraMessage = JsonSerializer.Deserialize<CameraDTO>(message.PayloadSegment);
                    if (cameraMessage != null)
                    {
                        await _jsRuntime.InvokeVoidAsync("set_img_src", $"img-{cameraMessage.Id}", cameraMessage.Image);
                    }
                }
            };

            var mqttClientOptions = new MqttClientOptionsBuilder()
            .WithTcpServer("ictrobot.hknu.ac.kr", 8085)
            .Build();
            await MqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);

            var mqttSubscribeOptions = mqttFactory.CreateSubscribeOptionsBuilder()
            .WithTopicFilter(f => { f.WithTopic("camera/image"); })
            .Build();
            await MqttClient.SubscribeAsync(mqttSubscribeOptions, CancellationToken.None);

            await getCameras(User.Id);
        }
    }

    private async Task SetCameraAngle(ChangeEventArgs args, int id)
    {
        if (args.Value != null)
        {
            var angle = int.Parse(args.Value.ToString());
            var camera = await _cameraRepository.Get(id);
            if (camera != null)
            {
                camera.Angle = angle;
                await _cameraRepository.Update(camera);
            }
            var cameraMessage = new CameraDTO
                {
                    Id = id,
                    Angle = angle,
                };
            var payload = JsonSerializer.Serialize<CameraDTO>(cameraMessage);

            if (MqttClient != null && MqttClient.IsConnected)
            {
                var applicationMessage = new MqttApplicationMessageBuilder()
                .WithTopic("camera/update/angle/syn")
                .WithPayload(payload)
                .Build();
                await MqttClient.PublishAsync(applicationMessage, CancellationToken.None);

                var input = $"input-{cameraMessage.Id}";
                await _jsRuntime.InvokeVoidAsync("set_input_disabled", input, true);
            }
        }
    }
}
